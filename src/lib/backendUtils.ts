import fs from "fs/promises";
import tmp from "os";
import { exec } from "child_process";
import path from "path";
/**
 * Converts a single EPUB File object to KEPUB using kepubify CLI.
 * @param file File object representing the EPUB file.
 * @returns Promise that resolves to the output KEPUB File object.
 */
export async function epubToKepub(file: File): Promise<File> {
  // First we write the input file to a temporary location
  // this is necessary because kepubify CLI requires a file path.
  // We add a salt to the temp file name to avoid conflicts
  const salt = Math.random().toString(36).substring(2, 15);
  const tempDir = tmp.tmpdir();
  const tempFolder = path.join(tempDir, salt);
  await fs.mkdir(tempFolder, { recursive: true }); // Ensure directory exists
  const tempInputPath = path.join(tempFolder, file.name);
  await fs.writeFile(tempInputPath, Buffer.from(await file.arrayBuffer()));

  // Similarly, kepubify CLI requires an output file path so we need to prepare that
  const outputFileName = file.name.replace(/\.epub$/i, "_converted.kepub.epub");  
  const tempOutputPath = path.join(tempFolder, outputFileName);
  const kebupifyPath = process.env.KEPUBIFYPATH

  // Now we can call the CLI command to convert the file
  await new Promise<void>((resolve, reject) => {
    exec(`"${kebupifyPath}" "${tempInputPath}" -o "${tempFolder}"`, (error) => {
      if (error) reject(error);
      else resolve();
      });
  });

  // Now we can read the output file generated by kepubify back into a File object
  const outputBuffer = await fs.readFile(tempOutputPath);
  const kepubFile = new File([outputBuffer], outputFileName, { type: "application/octet-stream" });

  // We don't need the temporary files anymore, so we can delete them
  await fs.unlink(tempInputPath);
  await fs.unlink(tempOutputPath);

  return kepubFile;
}